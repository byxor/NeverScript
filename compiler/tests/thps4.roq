:i $my_int$ = %i(10,0000000a)
:i $my_int$ = %i(4294967286,fffffff6)
:i $my_float$ = %f(0.100000)
:i $my_float$ = %f(-0.100000)
:i $my_string$ = %s(3,"hey")
:i $my_pair$ = %vec2(1.000000,2.000000)
:i $my_pair$ = %vec2(-1.000000,-2.000000)
:i $my_vector$ = %vec3(100.000000,200.000000,300.000000)
:i $my_vector$ = %vec3(-1.000000,-2.000000,-3.000000)
:i $my_array$ = :a{%i(1,00000001);%i(2,00000002);%i(3,00000003):a}
:i $my_struct$ = :s{$x$ = %i(1,00000001);$y$ = %i(2,00000002);$z$ = %i(3,00000003):s}
:i $my_checksum$ = $[0df0adde]$
:i $my_checksum$ = $identifiers_are_checksums_too$
:i $my_checksum$ = $checksums between backticks can have spaces$
:i $x$ = %i(10,0000000a)
:i $my_struct$ = :s{
	:i %i(1,00000001)
	:i %i(2,00000002)
	:i %i(3,00000003)
:i :s}
:i $x$ = %i(10,0000000a)
:i function $TestBasicExpressions$
	:i $x$ = %i(1,00000001)
	:i $x$ =  (%i(1,00000001))
	:i $description$ = %s(14,"Positive ints:")
	:i $x$ =  (%i(1,00000001) + %i(2,00000002))
	:i $x$ =  (%i(1,00000001) - %i(2,00000002))
	:i $x$ =  (%i(1,00000001) * %i(3,00000003))
	:i $x$ =  (%i(1,00000001) / %i(2,00000002))
	:i $description$ = %s(14,"Negative ints:")
	:i $x$ =  (%i(4294967295,ffffffff) + %i(4294967294,fffffffe))
	:i $x$ =  (%i(4294967295,ffffffff) - %i(4294967294,fffffffe))
	:i $x$ =  (%i(4294967295,ffffffff) * %i(4294967293,fffffffd))
	:i $x$ =  (%i(4294967295,ffffffff) / %i(4294967294,fffffffe))
	:i $description$ = %s(16,"Positive floats:")
	:i $x$ =  (%f(1.000000) + %f(2.000000))
	:i $x$ =  (%f(1.000000) - %f(2.000000))
	:i $x$ =  (%f(1.000000) * %f(3.000000))
	:i $x$ =  (%f(1.000000) / %f(2.000000))
	:i $description$ = %s(16,"Negative floats:")
	:i $x$ =  (%f(-1.000000) + %f(-2.000000))
	:i $x$ =  (%f(-1.000000) - %f(-2.000000))
	:i $x$ =  (%f(-1.000000) * %f(-3.000000))
	:i $x$ =  (%f(-1.000000) / %f(-2.000000))
:i endfunction
:i function $TestStringEscaping$
	:i $description$ = %s(37,"String containing a single backslash:")
	:i $s$ = %s(1,"\")
	:i $description$ = %s(34,"String containing two backslashes:")
	:i $s$ = %s(2,"\\")
	:i $description$ = %s(26,"String containing a quote:")
	:i $s$ = %s(1,""")
:i endfunction
:i function $TestShorthandMath$
	:i $description$ = %s(17,"Global variables:")
	:i $Change$$x$ =  ($x$ + %i(5,00000005))
	:i $Change$$x$ =  ($x$ - %i(6,00000006))
	:i $Change$$x$ =  ($x$ * %i(7,00000007))
	:i $Change$$x$ =  ($x$ * %i(8,00000008))
	:i $description$ = %s(16,"Local variables:")
	:i %GLOBAL%$x$ =  (%GLOBAL%$x$ + %i(5,00000005))
	:i %GLOBAL%$x$ =  (%GLOBAL%$x$ - %i(6,00000006))
	:i %GLOBAL%$x$ =  (%GLOBAL%$x$ * %i(7,00000007))
	:i %GLOBAL%$x$ =  (%GLOBAL%$x$ / %i(8,00000008))
:i endfunction
:i function $TestInvocations$
	:i $description$ = %s(36,"Invocation with checksum parameters:")
	:i $NameOfScript$$param1$$param2$$param3$
	:i $description$ = %s(36,"Invocation with assigned parameters:")
	:i $NameOfScript$$param1$ = %i(1,00000001)$param2$ = %f(2.000000)$param3$ = %s(1,"3")$param4$ = %vec2(4.000000,0.400000)$param5$ = :a{%i(5,00000005)%f(5.000000)%s(1,"5")$five$%s(4,"five"):a}$param6$ = :s{$six$ = %i(6,00000006):s}
	:i $description$ = %s(33,"Invocation across multiple lines:")
	:i $NameOfScript$$param1$ = %i(1,00000001)$param2$ = %f(2.000000)$param3$ = %s(1,"3")
	:i $description$ = %s(58,"Invocation across multiple lines (1st param on next line):")
	:i $NameOfScript$$param1$ = %i(1,00000001)$param2$ = %f(2.000000)$param3$ = %s(1,"3")
:i endfunction
:i function $TestIfStatements$
	:i $description$ = %s(9,"Basic if:")
	:i if $something$endif
	:i $description$ = %s(14,"Basic if/else:")
	:i if $something$elseendif
	:i $description$ = %s(21,"Basic if/elseif/else:")
	:i if $c1$else
		:i if $c2$elseendif
	:i endif
	:i $description$ = %s(26,"Multi-line if/elseif/else:")
	:i if $c1$
		:i $b1$
	:i else
		:i if $c2$
			:i $b2$
		:i else
			:i $b3$
		:i endif
	:i endif
	:i $description$ = %s(27,"Condition with logical not:")
	:i if NOT $condition$endif
	:i $description$ = %s(27,"Condition with logical and:")
	:i if $c1$ AND $c2$endif
	:i $description$ = %s(26,"Condition with invocation:")
	:i if $GotParam$$Foo$endif
	:i $description$ = %s(48,"Condition with invocation with struct parameter:")
	:i if $IsOld$:s{$name$ = %s(5,"byxor");$age$ = %i(23,00000017):s}
		:i $MakeYounger$
	:i endif
	:i $description$ = %s(65,"Condition with logical not with invocation with struct parameter:")
	:i if NOT $IsFinished$:s{$progress$ = %i(10,0000000a);$finish$ = %i(100,00000064):s}
		:i $MakeProgress$
	:i endif
	:i $description$ = %s(42,"Condition with member function invocation:")
	:i if $Object$.$GetCollision$
		:i $PlayCollisionSound$
	:i endif
	:i $description$ = %s(64,"Condition with member function invocation with struct parameter:")
	:i if $Object$.$GetCollision$:s{$length$ = %i(20,00000014):s}
		:i $PlayCollisionSound$
	:i endif
	:i $description$ = %s(12,"Comparisons:")
	:i if  ($c1$ = $c2$) endif
	:i if  ($c1$ < $c2$) endif
	:i if  ($c1$ > $c2$) endif
	:i if NOT  ($c1$ = $c2$) endif
	:i if NOT  ($c1$ > $c2$) endif
	:i if NOT  ($c1$ < $c2$) endif
:i endfunction
:i function $TestEmptyReturn$
	:i return

:i endfunction
:i function $TestReturningMultipleParametersOnSingleLine$
	:i return
	$x$ = %i(1,00000001)$y$ = %i(2,00000002)$z$ = %i(3,00000003)$w$ = :s{$what$ = %s(3,"the");$heckIsHeDoingHere$:s}
:i endfunction
:i function $TestReturningMultipleParametersOnMultipleLines$
	:i return
	$x$ = %i(11,0000000b)$y$ = %i(22,00000016)$z$ = %i(33,00000021)
:i endfunction
:i function $TestWhile$
	:i while

		:i $Tick$
		:i $Tock$
	:i loop_to
:i endfunction
:i function $TestNestedWhile$
	:i while

		:i while

		:i loop_to
	:i loop_to
:i endfunction
:i function $TestRandom$
	:i select(2f,2, 0a 00 05 00) :OFFSET(0):OFFSET(1)
		 :POS(0)
		:i $print$%s(43,"this is gonna happen 10/15 times on average")
		:i $print$%s(5,"yo yo")
		:i
	:BREAKTO(2)
		 :POS(1)
		:i $print$%s(42,"this is gonna happen 5/15 times on average")
		:i $print$%s(8,"skrrrrrt")
		:i  :POS(2)
	:i $x$ = select(2f,4, 09 00 04 00 0a 00 02 00) :OFFSET(3):OFFSET(4):OFFSET(5):OFFSET(6)
		 :POS(3) %s(3,"Hey")
	:BREAKTO(7)
		 :POS(4) %s(5,"Hello")
	:BREAKTO(7)
		 :POS(5) %s(2,"Yo")
	:BREAKTO(7)
		 :POS(6) %s(10,"What's up?") :POS(7)
	:i endfunction
	:i function $TestIdentifiersWithKeywords$
		:i $description$ = %s(17,"Keyword prefixes:")
		:i $script_1$ = %s(0,"")
		:i $or_1$ = %s(0,"")
		:i $if_1$ = %s(0,"")
		:i $and_1$ = %s(0,"")
		:i $else_1$ = %s(0,"")
		:i $while_1$ = %s(0,"")
		:i $break_1$ = %s(0,"")
		:i $random_1$ = %s(0,"")
		:i $return_1$ = %s(0,"")
		:i $description$ = %s(39,"Actual keywords (with backtick syntax):")
		:i $script$ = %s(0,"")
		:i $or$ = %s(0,"")
		:i $if$ = %s(0,"")
		:i $and$ = %s(0,"")
		:i $else$ = %s(0,"")
		:i $while$ = %s(0,"")
		:i $break$ = %s(0,"")
		:i $random$ = %s(0,"")
		:i $return$ = %s(0,"")
	:i endfunction
	:i :end