// At the top level, we can define global variables.

// Integers
my_number = 256            // Decimal     (Base 10)
my_number = 0x1234D00D     // Hexadecimal (Base 16)
my_number = 0b10100111001  // Binary      (Base 2)
my_number = 0o1234567      // Octal       (Base 8)

// Floats
my_float = 123.45
my_float = 18.0            // .0 required to avoid ambiguity with integers

// Booleans
neverscript_rocks = true
neverscript_sucks = false

// Strings
my_string = "Hello, I contain text!"
my_string = ""

// Arrays
my_array = [1 2 3 4]
my_array = ["Foo" "Bar" "Baz"]
my_array = [[1 2] [3 4]]

// Pairs (2 floats packed together as a unit)
my_pair = (0.2, 0.3)
my_pair = (99.0, 500.0)

// Vectors (3 floats packed together as a unit)
vector_1 = (0.0, 0.0, 0.0)
vector_2 = (0.1, 0.2, 0.3)

// Structs
language = {
    name = "NeverScript"
    is_fun = true
};

nested1 = {
    nested2 = {
        foo = 10
        bar = 20
        nested3 = {
            baz = [1 2 3 4]
        };
    };
};

nameless_struct = {10 minutes}

// Raw 32-bit checksums can be used instead of variable names, although it's not recommended to do this unless you really need to.
SoundClip = #FF821337
#11223344 = "Foo, bar, baz"

/*
  Scripts are also defined at the top level.
  Inside scripts, slightly more complex language features are enabled.
  e.g.
   -    `<` and `>` can be used to reference local memory (local variables & parameters).
   -     Example:    <my_local_variable>
  
   -    `(` and `)` can be used to perform calculations and to control the precedence of operations.
   -    `+`   does addition.
   -    `-`   does subtraction.
   -    `*`   does multiplication.
   -    `/`   does division.
   -    `=`   checks if two values are equal.
   -    `>`   checks if a value is greater than another value.
   -    `<`   checks if a value is less than another value.
   -    `>=`  checks if a value is greater than or equal to another value.
   -    `<=`  checks if a value is less than or equal to another value.
   -    `and` checks if two conditions are both true.
   -    `or`  checks if at least one of two conditions is true.
   -    `xor` checks if one of two conditions is true, but disallows both to be true.
  
   -    Example:        (((5 + 5) * 10) / 4)
        Evaluates to:   25
  
   -    Calculations can contain variables.
        Example:   (<score> * 250)
   -    Example:   (<IsFalling> and (Score > 10))
  
   -    `return` can be used to store variables into the caller's local memory.
        Example:   return foo=10;
  
   -    Multiple values can be returned.
        Example:        return foo=10 bar=20;
        See the `add` function (which is called in `main`) for an example of how to use this feature.
*/

script add {
    return add_result=(<first> + <second>)
}

script change_global_string {
    change my_string="Oh no... Global state has been modified!"
}

script main {
    print text="Hello"

    // Add two numbers and print the return value
    add first=10 second=20
    print text=<add_result>

    // Call a function across multiple lines (style 1)
    kick_player name="byxor" \
                reason="using techs during game of koth"

    // Call a function across multiple lines (style 2):
    kick_player \
        name = "byxor" \
        reason = "using techs during game of koth"

    print text="Goodbye"
}

script doArbitraryStuff {
    variable = 10
    if (<variable> < 5) {
        print text="Variable is below 5"
    } else if (<variable> < 10) {
        print text="Variable is 5 or more, but below 10"
    } else {
        print text="Variable is 10 or more"
    }
    
    // Returns <vel_x> <vel_y> <vel_z> into local memory.
    GetSkaterVelocity;
    
    IsFalling = (<vel_y> < 0.0);
    if (<IsFalling>) {
        SetSkaterVelocity
            vel_x = <vel_x>
            vel_y = 0.0
            vel_z = <vel_z>;
    }
}
